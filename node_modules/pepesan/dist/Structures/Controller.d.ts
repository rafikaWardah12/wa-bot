/// <reference types="node" />
import { WAMessage } from "@whiskeysockets/baileys";
import { MessageResponse, Request, Response } from "../Types";
import { Handler } from "./Handler";
export declare class Controller {
    clientId: string;
    private handler;
    constructor(handler: Handler);
    protected reply(response: MessageResponse | MessageResponse[] | string | string[] | any[], withQuoted?: boolean): Promise<(import("@whiskeysockets/baileys").proto.IWebMessageInfo | undefined)[]>;
    protected send(number: string, response: MessageResponse | MessageResponse[] | string | string[] | any[], withQuoted?: boolean): Promise<(import("@whiskeysockets/baileys").proto.IWebMessageInfo | undefined)[]>;
    protected typing(): Promise<void>;
    protected readMessage(): Promise<void>;
    protected setState(state: string): Promise<void | undefined>;
    protected deleteState(): Promise<void | undefined>;
    getMedia(): Promise<Buffer | undefined>;
    protected addToGroup(userJid: string, groupJid: string): Promise<{
        status: string;
        jid: string;
        content: import("@whiskeysockets/baileys").BinaryNode;
    }[] | undefined>;
    protected forwardMessage(jid: string, quoted?: WAMessage): Promise<import("@whiskeysockets/baileys").proto.WebMessageInfo | undefined>;
    protected sendQuoted(jid: string, response: MessageResponse, quoted: WAMessage): Promise<import("@whiskeysockets/baileys").proto.WebMessageInfo | undefined>;
    protected checkParticipant(userJid: string, groupJid: string): Promise<boolean>;
    protected getResponseFromRequest(): Promise<MessageResponse>;
    protected setRequest(request: Request): Promise<void>;
    protected simulateCallback(request: Request): Promise<void>;
    protected simulateResponses(request: Request): Promise<Response | void | string | Response[]>;
}
