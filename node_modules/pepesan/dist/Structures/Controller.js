"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controller = void 0;
const Utils_1 = require("../Utils");
class Controller {
    constructor(handler) {
        this.handler = handler;
        this.clientId = handler.clientId;
    }
    reply(response, withQuoted = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const messages = [];
            const contents = this.handler.getMessageContent(response);
            for (const content of contents) {
                const message = yield this.handler.reply(content, withQuoted);
                messages.push(message);
            }
            return messages;
        });
    }
    send(number, response, withQuoted = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const messages = [];
            const jid = (0, Utils_1.parseJid)(number);
            const contents = this.handler.getMessageContent(response, jid);
            for (const content of contents) {
                const message = yield this.handler.send(jid, content, withQuoted);
                messages.push(message);
            }
            return messages;
        });
    }
    typing() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.typing();
        });
    }
    readMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.readMessage();
        });
    }
    setState(state) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return yield ((_a = this.handler.request.stateObject) === null || _a === void 0 ? void 0 : _a.setState(state));
        });
    }
    deleteState() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return yield ((_a = this.handler.request.stateObject) === null || _a === void 0 ? void 0 : _a.deleteState());
        });
    }
    getMedia() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.getMedia();
        });
    }
    addToGroup(userJid, groupJid) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.addToGroup(userJid, groupJid);
        });
    }
    forwardMessage(jid, quoted) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.forwardMessage(jid, quoted);
        });
    }
    sendQuoted(jid, response, quoted) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.sendQuoted(jid, response.getMessageContent(), quoted);
        });
    }
    checkParticipant(userJid, groupJid) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.checkParticipant(userJid, groupJid);
        });
    }
    getResponseFromRequest() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.handler.getResponseFromRequest();
        });
    }
    setRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setState(request.state);
            this.handler.request.state = request.state;
            yield this.handler.setMessageInfo(request.message);
        });
    }
    simulateCallback(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setRequest(request);
            yield this.handler.run();
        });
    }
    simulateResponses(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setRequest(request);
            return yield this.handler.getReturnValue();
        });
    }
}
exports.Controller = Controller;
