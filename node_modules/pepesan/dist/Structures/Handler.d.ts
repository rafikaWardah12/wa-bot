/// <reference types="node" />
import { AnyMessageContent, proto, WAMessage, WASocket } from "@whiskeysockets/baileys";
import { MessageHandler, MessageResponse, Request, Response } from "../Types";
export declare class Handler {
    clientId: string;
    socket?: WASocket;
    private _messageInfo?;
    private _router?;
    private _stateObject?;
    private _menuObject?;
    private _matchRoute?;
    private _state?;
    private _menus?;
    constructor(clientId: string, messageHandler: MessageHandler);
    private get text();
    private get button();
    private get menu();
    private get list();
    private get jid();
    private get number();
    private get name();
    private get messageType();
    private get type();
    private get message();
    get request(): Request;
    private initState;
    private initMenu;
    setMessageInfo(messageInfo: proto.IWebMessageInfo): Promise<this>;
    private getMatchRoute;
    private getMatchRoutes;
    private isKeywordMatch;
    private isStateMatch;
    private isButtonMatch;
    private isListMatch;
    private isMenuMatch;
    getMessageContents(): Promise<AnyMessageContent[]>;
    private callback;
    getReturnValue(): Promise<Response | void | string | Response[]>;
    getMessageContent(returnValue: any, targetJid?: string): AnyMessageContent[];
    private getContentMessage;
    private getMediaMessage;
    getMedia(): Promise<Buffer | undefined>;
    reply(message?: AnyMessageContent, withQuoted?: boolean): Promise<proto.WebMessageInfo | undefined>;
    send(jid: string | null, message?: AnyMessageContent, withQuoted?: boolean): Promise<proto.WebMessageInfo | undefined>;
    addToGroup(userJid: string, groupJid: string): Promise<{
        status: string;
        jid: string;
        content: import("@whiskeysockets/baileys").BinaryNode;
    }[] | undefined>;
    checkParticipant(userJid: string, groupJid: string): Promise<boolean>;
    forwardMessage(jid: string, quoted?: WAMessage): Promise<proto.WebMessageInfo | undefined>;
    sendQuoted(jid: string, message?: AnyMessageContent, quoted?: WAMessage): Promise<proto.WebMessageInfo | undefined>;
    getResponseFromRequest(): Promise<MessageResponse>;
    getQuotedFromRequest(): Promise<WAMessage | undefined>;
    run(): Promise<void>;
    readMessage(): Promise<void>;
    typing(): Promise<void>;
}
