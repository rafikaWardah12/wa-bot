"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Handler = void 0;
const baileys_1 = require("@whiskeysockets/baileys");
const Types_1 = require("../Types");
const Utils_1 = require("../Utils");
const StringExtractor_1 = __importDefault(require("../Utils/StringExtractor"));
const State_1 = require("./State");
const Menu_1 = require("../Types/Response/Menu");
const Menu_2 = require("./Menu");
class Handler {
    constructor(clientId, messageHandler) {
        this._router = messageHandler.router;
        this.socket = messageHandler.socket;
        // Init client ID
        this.clientId = clientId;
        this._router.clientId = clientId;
        Types_1.Response.clientId = clientId;
    }
    get text() {
        return (0, Utils_1.getTextFromMessage)(this.message);
    }
    get button() {
        var _a, _b, _c, _d;
        return {
            text: (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.buttonsResponseMessage) === null || _b === void 0 ? void 0 : _b.selectedDisplayText,
            value: (_d = (_c = this.message) === null || _c === void 0 ? void 0 : _c.buttonsResponseMessage) === null || _d === void 0 ? void 0 : _d.selectedButtonId,
        };
    }
    get menu() {
        return this.text.toLowerCase();
    }
    get list() {
        var _a, _b, _c, _d, _e, _f, _g;
        return {
            text: (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.listResponseMessage) === null || _b === void 0 ? void 0 : _b.title,
            value: (_e = (_d = (_c = this.message) === null || _c === void 0 ? void 0 : _c.listResponseMessage) === null || _d === void 0 ? void 0 : _d.singleSelectReply) === null || _e === void 0 ? void 0 : _e.selectedRowId,
            description: (_g = (_f = this.message) === null || _f === void 0 ? void 0 : _f.listResponseMessage) === null || _g === void 0 ? void 0 : _g.description
        };
    }
    get jid() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this._messageInfo) === null || _a === void 0 ? void 0 : _a.key) === null || _b === void 0 ? void 0 : _b.remoteJid) !== null && _c !== void 0 ? _c : null;
    }
    get number() {
        if (!this.jid)
            return;
        return this.jid.split("@")[0];
    }
    get name() {
        var _a;
        return (_a = this._messageInfo) === null || _a === void 0 ? void 0 : _a.pushName;
    }
    get messageType() {
        return (0, baileys_1.getContentType)(this.message);
    }
    get type() {
        var _a, _b;
        return (_a = this.messageType) === null || _a === void 0 ? void 0 : _a.substr(0, (_b = this.messageType) === null || _b === void 0 ? void 0 : _b.indexOf('Message'));
    }
    get message() {
        var _a, _b;
        return (_b = (_a = this._messageInfo) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : undefined;
    }
    get request() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        return {
            clientId: this.clientId,
            text: this.text,
            button: this.button,
            menu: this.menu,
            list: this.list,
            jid: this.jid,
            number: this.number,
            name: this.name,
            state: this._state,
            stateObject: this._stateObject,
            type: this.type,
            message: this._messageInfo,
            document: (_b = (_a = this.message) === null || _a === void 0 ? void 0 : _a.documentMessage) !== null && _b !== void 0 ? _b : undefined,
            image: (_d = (_c = this.message) === null || _c === void 0 ? void 0 : _c.imageMessage) !== null && _d !== void 0 ? _d : undefined,
            video: (_f = (_e = this.message) === null || _e === void 0 ? void 0 : _e.videoMessage) !== null && _f !== void 0 ? _f : undefined,
            audio: (_h = (_g = this.message) === null || _g === void 0 ? void 0 : _g.audioMessage) !== null && _h !== void 0 ? _h : undefined,
            sticker: (_k = (_j = this.message) === null || _j === void 0 ? void 0 : _j.stickerMessage) !== null && _k !== void 0 ? _k : undefined,
            contact: (_m = (_l = this.message) === null || _l === void 0 ? void 0 : _l.contactMessage) !== null && _m !== void 0 ? _m : undefined,
            location: (_p = (_o = this.message) === null || _o === void 0 ? void 0 : _o.locationMessage) !== null && _p !== void 0 ? _p : undefined,
            route: this._matchRoute
        };
    }
    initState() {
        return __awaiter(this, void 0, void 0, function* () {
            const state = new State_1.State(this.clientId, this.jid);
            this._state = yield state.get();
            this._stateObject = state;
        });
    }
    initMenu() {
        return __awaiter(this, void 0, void 0, function* () {
            const menu = new Menu_2.Menu(this.clientId, this.jid);
            this._menus = yield menu.get();
            this._menuObject = menu;
        });
    }
    setMessageInfo(messageInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            this._messageInfo = Object.assign(Object.assign({}, this._messageInfo), messageInfo);
            yield this.initState();
            yield this.initMenu();
            return this;
        });
    }
    getMatchRoute() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const matchRoutes = yield this.getMatchRoutes();
                if (!matchRoutes)
                    return;
                return (0, Utils_1.findAsyncSequential)(matchRoutes, (route) => __awaiter(this, void 0, void 0, function* () {
                    var e_1, _a;
                    try {
                        for (var _b = __asyncValues(route.middlewares), _c; _c = yield _b.next(), !_c.done;) {
                            const middleware = _c.value;
                            this._matchRoute = route;
                            const result = yield middleware(this.request, () => true);
                            if (result === false)
                                return false;
                            const type = (0, Utils_1.getObjectType)(result, 2);
                            const isResponse = type === 'MessageResponse' || typeof result === 'string' || Array.isArray(result);
                            if (isResponse) {
                                route.callback = function () {
                                    return result;
                                };
                                return route;
                            }
                            else {
                                route.callback = route.originCallback;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    return true;
                }));
            }
            catch (e) {
                console.error(e);
                return;
            }
        });
    }
    getMatchRoutes() {
        var _a;
        return (0, Utils_1.filterAsync)((_a = this._router) === null || _a === void 0 ? void 0 : _a.routes, (route) => __awaiter(this, void 0, void 0, function* () {
            const { path } = route;
            if (route.type === 'keyword')
                return this.isKeywordMatch(path, this.text);
            if (route.type === 'state')
                return yield this.isStateMatch(path);
            if (route.type === 'button')
                return yield this.isButtonMatch(path, this.request.button);
            if (route.type === 'list')
                return yield this.isListMatch(path, this.request.list);
            if (route.type === 'menu')
                return this.isMenuMatch(path, this.menu);
            return false;
        }));
    }
    isKeywordMatch(path, text) {
        return (0, Utils_1.isTextMatch)(text, path);
    }
    isStateMatch(path) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, Utils_1.isTextMatch)(this.request.state, path);
        });
    }
    isButtonMatch(path, button) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!button)
                return false;
            return (0, Utils_1.isTextMatch)(button.text, path) || (0, Utils_1.isTextMatch)(button.value, path);
        });
    }
    isListMatch(path, list) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!list)
                return false;
            return (0, Utils_1.isTextMatch)(list.text, path) || (0, Utils_1.isTextMatch)(list.value, path);
        });
    }
    isMenuMatch(path, menu) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!menu)
                return false;
            const menus = yield ((_a = this._menuObject) === null || _a === void 0 ? void 0 : _a.get());
            if (!menus)
                return false;
            const selectedMenu = menus[menu.toLowerCase()];
            if (!selectedMenu)
                return false;
            return (0, Utils_1.isTextMatch)(selectedMenu.value, path);
        });
    }
    getMessageContents() {
        return __awaiter(this, void 0, void 0, function* () {
            const returnValue = yield this.getReturnValue();
            const messageContents = this.getMessageContent(returnValue);
            return messageContents;
        });
    }
    callback() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // console.time('callback')
                const messageContents = yield this.getMessageContents();
                if (!(messageContents === null || messageContents === void 0 ? void 0 : messageContents.length))
                    return;
                if ((_a = global.CONFIG) === null || _a === void 0 ? void 0 : _a.readBeforeReply) {
                    yield this.readMessage();
                }
                if ((_b = global.CONFIG) === null || _b === void 0 ? void 0 : _b.typingBeforeReply) {
                    yield this.typing();
                }
                for (const content of messageContents) {
                    yield this.reply(content);
                }
                // console.timeEnd('callback')
            }
            catch (e) {
                console.error(e);
                throw e;
            }
        });
    }
    getReturnValue() {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            const matchRoute = yield this.getMatchRoute();
            if (!matchRoute)
                return;
            let text, returnValue;
            switch (matchRoute.type) {
                case 'state':
                    text = this.request.state;
                    break;
                case 'button':
                    text = this.button.value;
                    break;
                case 'list':
                    text = this.list.value;
                    break;
                case 'menu':
                    if (this.menu) {
                        text = (_c = (_b = (_a = this._menus) === null || _a === void 0 ? void 0 : _a[this.menu]) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : this.text;
                    }
                    break;
                default:
                    text = this.text;
                    break;
            }
            let requestParams = (_d = (0, StringExtractor_1.default)(matchRoute.path, { ignoreCase: true })(text)) !== null && _d !== void 0 ? _d : {};
            if (Array.isArray(matchRoute === null || matchRoute === void 0 ? void 0 : matchRoute.callback)) {
                const [ControllerClass, method] = matchRoute === null || matchRoute === void 0 ? void 0 : matchRoute.callback;
                const controller = new ControllerClass(this);
                const callback = controller[method];
                const callbackParams = (0, Utils_1.getParamsName)(callback);
                callbackParams.shift();
                requestParams = (_e = callbackParams.map((param) => requestParams[param])) !== null && _e !== void 0 ? _e : [];
                returnValue = controller[method](this.request, ...requestParams);
            }
            else {
                const callback = matchRoute === null || matchRoute === void 0 ? void 0 : matchRoute.callback;
                const callbackParams = (0, Utils_1.getParamsName)(callback);
                callbackParams.shift();
                requestParams = (_f = callbackParams.map((param) => requestParams[param])) !== null && _f !== void 0 ? _f : [];
                returnValue = matchRoute === null || matchRoute === void 0 ? void 0 : matchRoute.callback(this.request);
            }
            return returnValue;
        });
    }
    getMessageContent(returnValue, targetJid) {
        const type = (0, Utils_1.getObjectType)(returnValue, 2);
        const messageContents = [];
        if (typeof returnValue === 'string') {
            const messageContent = Types_1.Response.text.fromString(returnValue).getMessageContent();
            messageContent && messageContents.push(messageContent);
        }
        else if (type === 'MessageResponse') {
            const messageContent = returnValue.getMessageContent();
            messageContent && messageContents.push(messageContent);
        }
        else if (Array.isArray(returnValue)) {
            returnValue.forEach((value) => {
                const messageContent = this.getMessageContent(value);
                messageContents.push(...messageContent);
            });
        }
        if (returnValue instanceof Menu_1.Menu) {
            returnValue.saveToDatabase(this.clientId, targetJid !== null && targetJid !== void 0 ? targetJid : this.jid);
        }
        return messageContents;
    }
    getContentMessage() {
        var e_2, _a;
        var _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const stream = yield (0, baileys_1.downloadContentFromMessage)((_c = (_b = this._messageInfo) === null || _b === void 0 ? void 0 : _b.message) === null || _c === void 0 ? void 0 : _c.documentMessage, this.type);
                let buffer = Buffer.from([]);
                try {
                    for (var stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield stream_1.next(), !stream_1_1.done;) {
                        const chunk = stream_1_1.value;
                        buffer = Buffer.concat([buffer, chunk]);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (stream_1_1 && !stream_1_1.done && (_a = stream_1.return)) yield _a.call(stream_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return buffer;
            }
            catch (e) {
                console.error(e);
                return;
            }
        });
    }
    getMediaMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const buffer = yield (0, baileys_1.downloadMediaMessage)(this._messageInfo, 'buffer', {});
                return buffer;
            }
            catch (e) {
                console.error(e);
                return;
            }
        });
    }
    getMedia() {
        return __awaiter(this, void 0, void 0, function* () {
            const contentMessage = yield this.getContentMessage();
            if (contentMessage)
                return contentMessage;
            const mediaMessage = yield this.getMediaMessage();
            if (mediaMessage)
                return mediaMessage;
            return;
        });
    }
    reply(message, withQuoted = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.jid, message, withQuoted);
        });
    }
    send(jid, message, withQuoted = false) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                quoted: withQuoted ? yield this.getQuotedFromRequest() : undefined
            };
            if (jid && message)
                return yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.sendMessage(jid, message, options));
            return;
        });
    }
    addToGroup(userJid, groupJid) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.groupParticipantsUpdate(groupJid, [userJid], 'add'));
        });
    }
    checkParticipant(userJid, groupJid) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const groupMetaData = yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.groupMetadata(groupJid));
            return (groupMetaData === null || groupMetaData === void 0 ? void 0 : groupMetaData.participants.findIndex((participant) => participant.id === userJid)) !== -1;
        });
    }
    forwardMessage(jid, quoted) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.sendMessage(jid, { forward: this._messageInfo }, { quoted }));
        });
    }
    sendQuoted(jid, message, quoted) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (jid && message)
                return yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.sendMessage(jid, message, { quoted }));
            return;
        });
    }
    getResponseFromRequest() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const media = yield this.getMedia();
            if (media) {
                switch (this.request.type) {
                    case 'image':
                        return Types_1.Response.image.fromBuffer(media, this.request.text);
                    case 'video':
                        return Types_1.Response.video.fromBuffer(media, this.request.text, Buffer.from((_a = this.request.video) === null || _a === void 0 ? void 0 : _a.jpegThumbnail), (_b = this.request.video) === null || _b === void 0 ? void 0 : _b.gifPlayback);
                    case 'sticker':
                        return Types_1.Response.sticker.fromBuffer(media);
                    case 'audio':
                        return Types_1.Response.audio.fromBuffer(media, (_c = this.request.audio) === null || _c === void 0 ? void 0 : _c.ptt);
                    default:
                        return Types_1.Response.text.fromString(this.request.text);
                }
            }
            return Types_1.Response.text.fromString(this.request.text);
        });
    }
    getQuotedFromRequest() {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            return Object.assign({ key: (_a = this._messageInfo) === null || _a === void 0 ? void 0 : _a.key }, (_e = (_d = (_c = (_b = this._messageInfo) === null || _b === void 0 ? void 0 : _b.message) === null || _c === void 0 ? void 0 : _c.extendedTextMessage) === null || _d === void 0 ? void 0 : _d.contextInfo) === null || _e === void 0 ? void 0 : _e.quotedMessage);
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.callback();
        });
    }
    readMessage() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readMessages([this._messageInfo.key]));
        });
    }
    typing() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.sendPresenceUpdate("composing", this.jid));
        });
    }
}
exports.Handler = Handler;
