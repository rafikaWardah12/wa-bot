import { AnyMessageContent, AuthenticationState, ConnectionState, WAMessage, WASocket } from "@whiskeysockets/baileys";
import { Handler, Router } from ".";
import { Model } from "../Structures";
import { Config, ConnectionEvent, DbConfig, ExternalRequest, ServerConfig, UserInfo } from "../Types";
import Server from "./Server";
import { Extension } from "./Extension";
export default class Pepesan {
    id: string;
    version?: [number, number, number];
    sessionPath: string;
    printQRInTerminal: boolean;
    browserName: string;
    isEventRegistered: boolean;
    allowedJids?: string[];
    blockedJids?: string[];
    onOpen?: ConnectionEvent;
    onClose?: ConnectionEvent;
    onReconnect?: ConnectionEvent;
    onQR?: ConnectionEvent;
    onMessage?: (clientId: string, message: WAMessage) => Promise<void>;
    error?: string;
    auth?: AuthenticationState;
    saveCreds: () => Promise<void>;
    router: Router;
    handler?: Handler;
    dbConfig: DbConfig;
    models?: typeof Model[];
    socks: Map<string, WASocket>;
    clientIds: Set<string>;
    connectionStates: Map<string, Partial<ConnectionState>>;
    userInfos: Map<string, UserInfo>;
    serverConfig: ServerConfig;
    maxRetries: number;
    extensions: Extension[];
    enableHttpServer: boolean;
    constructor(router: Router, config?: Config);
    get server(): Server;
    initDefaultClientIds(): void;
    connect(): Promise<void>;
    connectClient(id?: string): Promise<void>;
    private getUserInfo;
    disconnect(deleteSession?: boolean): Promise<void>;
    disconnectClient(id?: string, deleteSession?: boolean): Promise<void>;
    private getMessageContentFromExternalRequest;
    execute(request: ExternalRequest, clientId?: string): Promise<AnyMessageContent[] | undefined>;
    send(request: ExternalRequest, number: string, clientId?: string): Promise<void>;
    private initEvents;
    private initDatabase;
    private initServer;
    private startServer;
    private isAllowedJid;
    addExtension(extension: Extension): void;
}
