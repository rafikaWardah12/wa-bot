"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const Utils_1 = require("../Utils");
const Menu_1 = require("./Menu");
class Router {
    constructor() {
        this._index = 0;
        this._routes = new Map();
        this._keys = [];
        this._middlewares = [];
    }
    get routes() {
        return Array.from(this._routes.values());
    }
    generateKey(path, type) {
        return `${type}[${path}]`;
    }
    keyword(path, callback) {
        const type = 'keyword';
        const middleware = (request) => __awaiter(this, void 0, void 0, function* () { return (0, Utils_1.isTextMatch)(request.text, path); });
        return this.initRoute(type, middleware, path, callback);
    }
    button(path, callback) {
        const type = 'button';
        const middleware = (request) => __awaiter(this, void 0, void 0, function* () { var _a, _b; return (0, Utils_1.isTextMatch)((_a = request.button) === null || _a === void 0 ? void 0 : _a.text, path) || (0, Utils_1.isTextMatch)((_b = request.button) === null || _b === void 0 ? void 0 : _b.value, path); });
        return this.initRoute(type, middleware, path, callback);
    }
    menu(path, callback) {
        const type = 'menu';
        const middleware = (request) => __awaiter(this, void 0, void 0, function* () {
            const menu = request.menu;
            if (!menu)
                return false;
            const menuObject = new Menu_1.Menu(this.clientId, request.jid);
            const menus = yield menuObject.get();
            if (menus[path]) {
                return true;
            }
            return false;
        });
        return this.initRoute(type, middleware, path, callback);
    }
    list(path, callback) {
        const type = 'list';
        const middleware = (request) => __awaiter(this, void 0, void 0, function* () { var _a, _b; return (0, Utils_1.isTextMatch)((_a = request.list) === null || _a === void 0 ? void 0 : _a.text, path) || (0, Utils_1.isTextMatch)((_b = request.list) === null || _b === void 0 ? void 0 : _b.value, path); });
        return this.initRoute(type, middleware, path, callback);
    }
    state(path, callback) {
        const type = 'state';
        const middleware = (request) => __awaiter(this, void 0, void 0, function* () { return ((yield request.state) === path); });
        return this.initRoute(type, middleware, path, callback);
    }
    middleware(middleware, callback) {
        const type = 'middleware';
        if (Array.isArray(middleware)) {
            const middlewareFunction = middleware.shift();
            return this.initRoute(type, (request, next) => middlewareFunction(request, next, ...middleware));
        }
        return this.initRoute(type, middleware, undefined, callback);
    }
    initRoute(type, middleware, path, callback) {
        var _a;
        path = (_a = path !== null && path !== void 0 ? path : middleware.name) !== null && _a !== void 0 ? _a : "";
        const key = this.generateKey(path, type) + "-" + this._index;
        this._index++;
        if (!callback) {
            this._keys.push(key);
            this._middlewares.push(middleware);
            return this;
        }
        const newKey = [...this._keys, key].join("~");
        this._routes.set(newKey, {
            middlewares: this._middlewares.length === 0 ? [] : [...this._middlewares],
            callback,
            originCallback: callback,
            path,
            type,
            name: ''
        });
        return this;
    }
    group(callback) {
        var _a, _b;
        if (!((_a = this._keys) === null || _a === void 0 ? void 0 : _a.length) || !((_b = this._middlewares) === null || _b === void 0 ? void 0 : _b.length)) {
            return;
        }
        callback();
        this._keys.splice(-1);
        this._middlewares.splice(-1);
    }
    name(name) {
        const routeArray = Array.from(this._routes.entries());
        const [key, lastRoute] = routeArray[routeArray.length - 1];
        if (lastRoute) {
            lastRoute.name = name;
            this._routes.set(key, lastRoute);
        }
    }
}
exports.Router = Router;
