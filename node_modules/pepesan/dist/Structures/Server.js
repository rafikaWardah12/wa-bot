"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importStar(require("express"));
const ConnectionController_1 = require("./Server/ConnectionController");
const MessageController_1 = require("./Server/MessageController");
class Server {
    static init(pepesan) {
        Server.getInstance().pepesan = pepesan;
        return Server.getInstance();
    }
    static getInstance() {
        if (!Server.instance) {
            Server.instance = new Server();
        }
        return Server.instance;
    }
    getSocket(id) {
        var _a;
        return (_a = this.pepesan) === null || _a === void 0 ? void 0 : _a.socks.get(id);
    }
    sendSuccessResponse(res, data, message) {
        res.send({
            success: true,
            data,
            message
        }).status(200);
    }
    sendErrorResponse(res, error, status = 500) {
        res.send({
            success: false,
            message: error
        }).status(status);
    }
    start() {
        if (!this.pepesan) {
            throw new Error('Pepesan is not initialized');
        }
        const app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use(this.authMiddleware.bind(this));
        if (this.pepesan.serverConfig.customRoute) {
            app.use(this.pepesan.serverConfig.prefixPath, this.pepesan.serverConfig.customRoute);
        }
        app.use(this.pepesan.serverConfig.prefixPath, this.getRouter());
        this.httpServer = app.listen(this.pepesan.serverConfig.port, () => { var _a; return console.log(`Server is running on port ${(_a = this.pepesan) === null || _a === void 0 ? void 0 : _a.serverConfig.port}`); });
    }
    getRoutes() {
        return [
            {
                path: '/clients',
                method: 'get',
                handler: ConnectionController_1.getAllClients
            },
            {
                path: '/qr/:id?',
                method: 'get',
                handler: ConnectionController_1.getQrString
            },
            {
                path: '/qr-image/:id?',
                method: 'get',
                handler: ConnectionController_1.getQrImage
            },
            {
                path: '/status/:id?',
                method: 'get',
                handler: ConnectionController_1.getStatus
            },
            {
                path: '/connect/:id?',
                method: 'post',
                handler: ConnectionController_1.newConnection
            },
            {
                path: '/disconnect/:id?',
                method: 'post',
                handler: ConnectionController_1.removeConnection
            },
            {
                path: '/send/:id?',
                method: 'post',
                handler: MessageController_1.sendMessage
            }
        ];
    }
    getRouter() {
        const router = (0, express_1.Router)();
        for (const route of this.getRoutes()) {
            router[route.method](route.path, route.handler);
        }
        return router;
    }
    authMiddleware(req, res, next) {
        const authKey = this.pepesan.serverConfig.authKey;
        if (!authKey) {
            return next();
        }
        const key = req.query.authKey || req.headers['x-auth-key'];
        if (key !== authKey) {
            return this.sendErrorResponse(res, 'Unauthorized', 401);
        }
        return next();
    }
}
exports.default = Server;
