"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeConnection = exports.newConnection = exports.getStatus = exports.getQrImage = exports.getQrString = exports.getConnectionStatus = exports.getAllClients = void 0;
const Utils_1 = require("../../Utils");
const Server_1 = __importDefault(require("../Server"));
const qrcode_1 = __importDefault(require("qrcode"));
const getServer = () => {
    const server = Server_1.default.getInstance();
    if (!server.pepesan) {
        throw new Error('Pepesan is not initialized');
    }
    return server;
};
const getAllClients = (_, res) => {
    try {
        const server = getServer();
        const { pepesan } = server;
        if (!pepesan) {
            throw new Error('Pepesan is not initialized');
        }
        const clients = Array.from(pepesan.connectionStates).map(connectionState => {
            const clientId = connectionState[0];
            return Object.assign(Object.assign(Object.assign({}, connectionState[1]), { id: clientId, connectionStatus: (0, Utils_1.getConnectionStatusString)(connectionState[1]) }), pepesan.userInfos.get(clientId));
        });
        return getServer().sendSuccessResponse(res, clients);
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
};
exports.getAllClients = getAllClients;
const getQr = (req) => {
    var _a, _b, _c;
    const server = getServer();
    const { pepesan } = server;
    const id = (_b = (_a = req.params) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 'default';
    if (!pepesan) {
        throw new Error('Pepesan is not initialized');
    }
    const qr = (_c = pepesan.connectionStates.get(id)) === null || _c === void 0 ? void 0 : _c.qr;
    if (!qr) {
        throw new Error('QR is not available');
    }
    return qr;
};
const getConnectionStatus = (req) => {
    var _a, _b;
    const server = getServer();
    const { pepesan } = server;
    const id = (_b = (_a = req.params) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 'default';
    if (!pepesan) {
        throw new Error('Pepesan is not initialized');
    }
    const connectionState = pepesan.connectionStates.get(id);
    if (!connectionState) {
        throw new Error('Client has not been created');
    }
    const status = (0, Utils_1.getConnectionStatusString)(connectionState);
    return {
        status,
        isConnected: status === 'Connected',
    };
};
exports.getConnectionStatus = getConnectionStatus;
const getQrString = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const status = (0, exports.getConnectionStatus)(req);
        if (status.isConnected) {
            return getServer().sendSuccessResponse(res, null, 'Client is already connected');
        }
        const qr = getQr(req);
        return getServer().sendSuccessResponse(res, qr);
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
});
exports.getQrString = getQrString;
const getQrImage = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const status = (0, exports.getConnectionStatus)(req);
        if (status.isConnected) {
            return getServer().sendSuccessResponse(res, null, 'Client is already connected');
        }
        const qr = getQr(req);
        const image = yield qrcode_1.default.toBuffer(qr);
        res.writeHead(200, {
            'Content-Type': 'image/png',
            'Content-Length': image.length
        });
        return res.end(image);
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
});
exports.getQrImage = getQrImage;
const getStatus = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const status = (0, exports.getConnectionStatus)(req);
        return getServer().sendSuccessResponse(res, status);
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
});
exports.getStatus = getStatus;
const newConnection = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    try {
        const id = (_b = (_a = req.params) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 'default';
        const server = getServer();
        const { pepesan } = server;
        if (!pepesan) {
            throw new Error('Pepesan is not initialized');
        }
        yield pepesan.connectClient(id);
        return getServer().sendSuccessResponse(res, { id }, 'Client with id ' + id + ' has been created');
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
});
exports.newConnection = newConnection;
const removeConnection = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _c, _d;
    try {
        const id = (_d = (_c = req.params) === null || _c === void 0 ? void 0 : _c.id) !== null && _d !== void 0 ? _d : 'default';
        const removeSession = req.query.removeSession || false;
        const server = getServer();
        const { pepesan } = server;
        if (!pepesan) {
            throw new Error('Pepesan is not initialized');
        }
        yield pepesan.disconnectClient(id, removeSession);
        return getServer().sendSuccessResponse(res, null, 'Client with id ' + id + ' has been removed');
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
});
exports.removeConnection = removeConnection;
