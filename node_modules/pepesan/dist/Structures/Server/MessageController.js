"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendMessage = void 0;
const Server_1 = __importDefault(require("../Server"));
const getServer = () => {
    const server = Server_1.default.getInstance();
    if (!server.pepesan) {
        throw new Error('Pepesan is not initialized');
    }
    return server;
};
const sendMessage = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    try {
        const server = getServer();
        const { pepesan } = server;
        const id = (_b = (_a = req.params) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 'default';
        const message = (_c = req.body) === null || _c === void 0 ? void 0 : _c.message;
        const number = (_d = req.body) === null || _d === void 0 ? void 0 : _d.number;
        if (!message) {
            throw new Error('Parameter message is required');
        }
        if (!number) {
            throw new Error('Parameter number is required');
        }
        yield (pepesan === null || pepesan === void 0 ? void 0 : pepesan.send(message, number, id));
        return getServer().sendSuccessResponse(res, null, 'Messages sent');
    }
    catch (error) {
        return getServer().sendErrorResponse(res, error.message);
    }
});
exports.sendMessage = sendMessage;
