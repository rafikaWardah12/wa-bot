"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const fs_1 = require("fs");
const Database_1 = require("../Database");
class State {
    constructor(clientId, jid) {
        var _a, _b, _c, _d;
        this.PREFIX_LENGTH = (_b = (_a = global.CONFIG) === null || _a === void 0 ? void 0 : _a.statePrefixLength) !== null && _b !== void 0 ? _b : 9;
        this.PATH = (_d = (_c = global.CONFIG) === null || _c === void 0 ? void 0 : _c.statePath) !== null && _d !== void 0 ? _d : './state';
        this.clientId = clientId;
        this.jid = jid;
    }
    get prefix() {
        return this.jid.substring(0, this.PREFIX_LENGTH);
    }
    get dirPath() {
        return `${this.PATH}/${this.clientId}`;
    }
    get filePath() {
        return `${this.dirPath}/${this.prefix}.json`;
    }
    get() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = global.CONFIG) === null || _a === void 0 ? void 0 : _a.stateType) === 'db') {
                return yield this.getFromDb();
            }
            return yield this.getFromFile();
        });
    }
    getFromDb() {
        return __awaiter(this, void 0, void 0, function* () {
            const [stateModel] = yield Database_1.State.findOrCreate({
                where: { jid: this.jid, clientId: this.clientId }, defaults: { jid: this.jid, state: "" },
            });
            return stateModel.state;
        });
    }
    getFromFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.dirPath)
                    return null;
                if (!(0, fs_1.existsSync)(this.dirPath)) {
                    (0, fs_1.mkdirSync)(this.dirPath);
                }
                const file = (0, fs_1.readFileSync)(this.filePath, { encoding: 'utf-8' });
                const data = JSON.parse(file);
                return data[this.jid];
            }
            catch (error) {
                return null;
            }
        });
    }
    setState(state) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = global.CONFIG) === null || _a === void 0 ? void 0 : _a.stateType) === 'db') {
                yield this.setDbState(state);
            }
            else {
                yield this.setFileState(state);
            }
        });
    }
    setFileState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            let data = {};
            try {
                if (!this.dirPath)
                    return;
                if (!(0, fs_1.existsSync)(this.dirPath)) {
                    (0, fs_1.mkdirSync)(this.dirPath);
                }
                const file = (0, fs_1.readFileSync)(this.filePath, { encoding: 'utf-8' });
                data = JSON.parse(file);
            }
            catch (error) {
                // do nothing
            }
            finally {
                data[this.jid] = state;
                (0, fs_1.writeFileSync)(this.filePath, JSON.stringify(data));
            }
        });
    }
    setDbState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Database_1.State.update({ state }, {
                where: {
                    clientId: this.clientId,
                    jid: this.jid
                }
            });
        });
    }
    deleteState() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = global.CONFIG) === null || _a === void 0 ? void 0 : _a.stateType) === 'db') {
                yield this.deleteDbState();
            }
            else {
                yield this.deleteFileState();
            }
        });
    }
    deleteFileState() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const file = (0, fs_1.readFileSync)(this.filePath, { encoding: 'utf-8' });
                const data = JSON.parse(file);
                delete data[this.jid];
                (0, fs_1.writeFileSync)(this.filePath, JSON.stringify(data));
            }
            catch (error) {
                // do nothing
            }
        });
    }
    deleteDbState() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Database_1.State.update({ state: null }, {
                where: {
                    clientId: this.clientId,
                    jid: this.jid
                }
            });
        });
    }
}
exports.State = State;
