/// <reference types="node" />
import { WASocket, proto } from "@whiskeysockets/baileys";
import { Router } from "../Structures";
import { State } from "../Structures/State";
import { Audio, Button, Document, Image, List, MenuResponse, Sticker, Text, Video } from "./Response";
import { Route } from "./Routes";
export declare class Response {
    static clientId: any;
    static getResponseClass(responseClass: any): any;
    static get image(): typeof Image;
    static get text(): typeof Text;
    static get sticker(): typeof Sticker;
    static get audio(): typeof Audio;
    static get video(): typeof Video;
    static get button(): typeof Button;
    static get list(): typeof List;
    static get menu(): typeof MenuResponse.Menu;
    static get document(): typeof Document;
}
export declare type Request = {
    id?: string | null;
    clientId?: string | null;
    key?: proto.IMessageKey | null;
    text?: string;
    menu?: string;
    button?: ButtonObject;
    list?: ListObject;
    jid: string | null;
    number?: string;
    name?: string | null;
    state?: string | null;
    stateObject?: State;
    type?: RequestType;
    message?: proto.IWebMessageInfo;
    document?: proto.Message.IDocumentMessage;
    image?: proto.Message.IImageMessage;
    video?: proto.Message.IVideoMessage;
    audio?: proto.Message.IAudioMessage;
    sticker?: proto.Message.IStickerMessage;
    contact?: proto.Message.IContactMessage;
    location?: proto.Message.ILocationMessage;
    route?: Route;
};
export declare type RequestType = 'image' | 'video' | 'document' | 'sticker' | 'audio';
export declare type MessageHandler = {
    router: Router;
    socket?: WASocket;
};
export declare type ButtonObject = {
    text: string;
    value: string;
};
export declare type ListObject = {
    text: string;
    value: string;
    description: string;
};
export declare type MenuObject = {
    text: string;
    value: string;
    code?: string;
};
export declare type ExternalRequest = {
    jid: string;
    text?: string;
    media?: string | Buffer;
    type?: RequestType | 'text';
};
