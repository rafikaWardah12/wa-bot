import { ConnectionState, WAMessage } from "@whiskeysockets/baileys";
import { Model } from "../Structures";
import { Dialect } from "sequelize";
import { Router } from "express";
export declare type ConnectionEvent = (clientId: string, state: Partial<ConnectionState>) => void;
export declare type Config = {
    id?: string;
    version?: [number, number, number];
    printQRInTerminal?: boolean;
    sessionPath?: string;
    browserName?: string;
    allowedNumbers?: string[];
    blockedNumbers?: string[];
    onOpen?: ConnectionEvent;
    onClose?: ConnectionEvent;
    onReconnect?: ConnectionEvent;
    onQR?: ConnectionEvent;
    onMessage?: (clientId: string, message: WAMessage) => Promise<void>;
    db?: DbConfig;
    enableHttpServer?: boolean;
    server?: ServerConfig;
    models?: typeof Model[];
    menuTemplate?: string;
    menuHeader?: string;
    stateType?: 'db' | 'file';
    statePath?: string;
    statePrefixLength?: number;
    readBeforeReply?: boolean;
    typingBeforeReply?: boolean;
    reusableMenu?: boolean;
    clientIds?: Set<string>;
    maxRetries?: number;
};
export declare type DbConfig = {
    dialect?: Dialect;
    host?: string;
    port?: number;
    name?: string;
    user?: string;
    pass?: string;
    path?: string;
    syncAlter?: boolean;
    timezone?: string;
};
export declare type ServerConfig = {
    port?: number;
    prefixPath?: string;
    authKey?: string;
    customRoute?: typeof Router;
};
export declare type ServerMethod = 'get' | 'post' | 'put' | 'delete' | 'patch' | 'head' | 'options' | 'trace';
export declare type ServerRoute = {
    path: string;
    method: ServerMethod;
    handler: (req: any, res: any) => void;
};
export declare type UserInfo = {
    number: string;
    name?: string;
    imgUrl?: string;
    status?: string;
} & Record<string, any>;
