"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayOfArrayOfObjectList = exports.ArrayOfArrayStringList = exports.List = void 0;
const _1 = require(".");
class List extends _1.MessageResponse {
    constructor(buttonText, title, text, footer) {
        super();
        this.buttonText = buttonText;
        this.title = title !== null && title !== void 0 ? title : " ";
        this.text = text !== null && text !== void 0 ? text : " ";
        this.footer = footer;
    }
    static fromArrayOfArrayOfString(sections, lists, descriptions, buttonText, title, text, footer) {
        return new ArrayOfArrayStringList(sections, lists, descriptions, buttonText, title, text, footer);
    }
    static fromArrayOfArrayOfObject(sections, lists, buttonText, title, text, footer) {
        return new ArrayOfArrayOfObjectList(sections, lists, buttonText, title, text, footer);
    }
    getMessageContent() {
        return;
    }
}
exports.List = List;
class ArrayOfArrayStringList extends List {
    constructor(sections, lists, descriptions, buttonText, title, text, footer) {
        super(buttonText, title, text, footer);
        this.sections = sections;
        this.lists = lists;
        this.descriptions = descriptions;
    }
    get formattedList() {
        return this.sections.map((section, index) => {
            return {
                title: section,
                rows: this.lists[index].map((list, listIndex) => ({
                    title: list,
                    rowId: `option${listIndex}`,
                    description: this.descriptions[index][listIndex],
                }))
            };
        });
    }
    getMessageContent() {
        return { buttonText: this.buttonText, title: this.title, text: this.text, footer: this.footer, sections: this.formattedList };
    }
}
exports.ArrayOfArrayStringList = ArrayOfArrayStringList;
class ArrayOfArrayOfObjectList extends List {
    constructor(sections, lists, buttonText, title, text, footer) {
        super(buttonText, title, text, footer);
        this.sections = sections;
        this.lists = lists;
    }
    get formattedList() {
        return this.sections.map((section, index) => {
            return {
                title: section,
                rows: this.lists[index].map((list) => ({
                    title: list.text,
                    rowId: list.value,
                    description: list.description,
                }))
            };
        });
    }
    getMessageContent() {
        return { buttonText: this.buttonText, title: this.title, text: this.text, footer: this.footer, sections: this.formattedList };
    }
}
exports.ArrayOfArrayOfObjectList = ArrayOfArrayOfObjectList;
