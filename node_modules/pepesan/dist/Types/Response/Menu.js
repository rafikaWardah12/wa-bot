"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayOfObjectMenu = exports.ArrayOfStringMenu = exports.Menu = void 0;
const _1 = require(".");
const Menu_1 = require("../../Structures/Menu");
const Utils_1 = require("../../Utils");
class Menu extends _1.MessageResponse {
    constructor(menus, text, template, footer) {
        var _a;
        super();
        const { menuHeader, menuTemplate } = global.CONFIG;
        this.menus = menus !== null && menus !== void 0 ? menus : [];
        this.header = menuHeader;
        this.text = text;
        this.template = (_a = template !== null && template !== void 0 ? template : menuTemplate) !== null && _a !== void 0 ? _a : "{number}. {menu}";
        this.footer = footer;
    }
    static fromArrayOfString(menus, text, template, footer) {
        return new ArrayOfStringMenu(menus, text, template, footer);
    }
    static fromArrayOfObject(menus, text, template, footer) {
        return new ArrayOfObjectMenu(menus, text, template, footer);
    }
    getMessageContent() {
        return { text: this.formattedMenus };
    }
    get formattedMenus() {
        const menus = this.menus.map(menu => {
            if (typeof this.template === "function")
                return this.template(menu);
            return (0, Utils_1.formatString)(this.template, { number: menu.code, menu: menu.text });
        });
        let formattedMenus = menus.join("\n");
        if (this.header) {
            formattedMenus = this.header + "\n\n" + formattedMenus;
        }
        if (this.text) {
            formattedMenus = this.text + "\n\n" + formattedMenus;
        }
        if (this.footer) {
            formattedMenus = formattedMenus + "\n\n" + this.footer;
        }
        return formattedMenus;
    }
    saveToDatabase(clientId, jid) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!jid)
                return;
            const menu = new Menu_1.Menu(clientId, jid);
            yield menu.setMenu(this.databaseMenu);
        });
    }
}
exports.Menu = Menu;
class ArrayOfStringMenu extends Menu {
    constructor(menus, text, template, footer) {
        const menuObjects = menus.map((menu, index) => {
            return { text: menu, value: menu, code: (index + 1).toString() };
        });
        super(menuObjects, text, template, footer);
        this.databaseMenu = Object.fromEntries(menus.map((menu, index) => [index + 1, {
                text: menu,
                value: menu,
                code: (index + 1).toString(),
                order: index
            }]));
    }
}
exports.ArrayOfStringMenu = ArrayOfStringMenu;
class ArrayOfObjectMenu extends Menu {
    constructor(menus, text, template, footer) {
        const menuObjects = menus.map((menu, index) => {
            var _a;
            return { text: menu.text, value: menu.value, code: (_a = menu.code) !== null && _a !== void 0 ? _a : (index + 1).toString() };
        });
        super(menuObjects, text, template, footer);
        this.databaseMenu = Object.fromEntries(menus.map((menu, index) => {
            var _a, _b;
            return [(_a = menu.code) !== null && _a !== void 0 ? _a : index + 1, {
                    text: menu.text,
                    value: menu.value,
                    code: (_b = menu.code) !== null && _b !== void 0 ? _b : (index + 1).toString(),
                    order: index
                }];
        }));
    }
}
exports.ArrayOfObjectMenu = ArrayOfObjectMenu;
