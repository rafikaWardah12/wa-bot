"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferVideo = exports.StreamVideo = exports.URLVideo = exports.Video = void 0;
const _1 = require(".");
const Utils_1 = require("../../Utils");
class Video extends _1.MessageResponse {
    constructor(caption, thumbnail, gifPlayback) {
        super();
        this.caption = caption;
        this.gifPlayback = gifPlayback !== null && gifPlayback !== void 0 ? gifPlayback : false;
        if (thumbnail) {
            if (thumbnail instanceof Buffer) {
                this.thumbnail = thumbnail;
            }
            else {
                (0, Utils_1.getBufferFromUrl)(thumbnail).then(buffer => {
                    this.thumbnail = buffer;
                });
            }
        }
    }
    static fromURL(url, caption, thumbnail, gifPlayback) {
        return new URLVideo(url, caption, thumbnail, gifPlayback);
    }
    static fromBuffer(buffer, caption, thumbnail, gifPlayback) {
        return new BufferVideo(buffer, caption, thumbnail, gifPlayback);
    }
    static fromStream(stream, caption, thumbnail, gifPlayback) {
        return new StreamVideo(stream, caption, thumbnail, gifPlayback);
    }
    getMessageContent() {
        return;
    }
}
exports.Video = Video;
class URLVideo extends Video {
    constructor(url, caption, thumbnail, gifPlayback) {
        super(caption, thumbnail, gifPlayback);
        this.url = url;
    }
    getMessageContent() {
        // @ts-ignore
        return { video: { url: this.url }, caption: this.caption, jpegThumbnail: this.thumbnail, gifPlayback: this.gifPlayback };
    }
}
exports.URLVideo = URLVideo;
class StreamVideo extends Video {
    constructor(stream, caption, thumbnail, gifPlayback) {
        super(caption, thumbnail, gifPlayback);
        this.stream = stream;
    }
    getMessageContent() {
        // @ts-ignore
        return { video: { stream: this.stream }, caption: this.caption, jpegThumbnail: this.thumbnail, gifPlayback: this.gifPlayback };
    }
}
exports.StreamVideo = StreamVideo;
class BufferVideo extends Video {
    constructor(buffer, caption, thumbnail, gifPlayback) {
        super(caption, thumbnail, gifPlayback);
        this.buffer = buffer;
    }
    getMessageContent() {
        // @ts-ignore
        return { video: this.buffer, caption: this.caption, jpegThumbnail: this.thumbnail, gifPlayback: this.gifPlayback };
    }
}
exports.BufferVideo = BufferVideo;
