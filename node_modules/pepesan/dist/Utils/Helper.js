"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = exports.getConnectionStatusString = exports.isValidJid = exports.formatString = exports.getParamsName = exports.getBase64FromUrl = exports.getBufferFromUrl = exports.getAllSubclasses = exports.getObjectType = exports.getValidRegex = exports.isTextMatch = exports.filterAsync = exports.findAsyncSequential = exports.getTextFromMessage = exports.parseNumber = exports.parseJid = void 0;
const baileys_1 = require("@whiskeysockets/baileys");
const axios_1 = __importDefault(require("axios"));
const StringExtractor_1 = __importDefault(require("./StringExtractor"));
const parseJid = (number) => {
    if ((0, baileys_1.isJidGroup)(number) || (0, baileys_1.isJidUser)(number))
        return number;
    const firstNumber = number.substring(0, 1);
    if (firstNumber == "0") {
        number = "62" + number.substring(1);
    }
    else if (firstNumber == "+") {
        number = number.substring(1);
    }
    return number + "@s.whatsapp.net";
};
exports.parseJid = parseJid;
const parseNumber = (jid) => {
    let number = jid.split("@s.whatsapp.net")[0];
    if (number.includes(":")) {
        number = number.split(":")[0];
    }
    return number;
};
exports.parseNumber = parseNumber;
const getTextFromMessage = (message) => {
    var _a, _b, _c, _d, _e, _f, _g;
    let text;
    if (message === null || message === void 0 ? void 0 : message.conversation) {
        text = message === null || message === void 0 ? void 0 : message.conversation;
    }
    if (message === null || message === void 0 ? void 0 : message.buttonsResponseMessage) {
        text = (_a = message === null || message === void 0 ? void 0 : message.buttonsResponseMessage) === null || _a === void 0 ? void 0 : _a.selectedDisplayText;
    }
    if (message === null || message === void 0 ? void 0 : message.listResponseMessage) {
        text = (_b = message === null || message === void 0 ? void 0 : message.listResponseMessage) === null || _b === void 0 ? void 0 : _b.title;
    }
    if (message === null || message === void 0 ? void 0 : message.extendedTextMessage) {
        text = (_c = message === null || message === void 0 ? void 0 : message.extendedTextMessage) === null || _c === void 0 ? void 0 : _c.text;
    }
    if (message === null || message === void 0 ? void 0 : message.imageMessage) {
        text = (_d = message === null || message === void 0 ? void 0 : message.imageMessage) === null || _d === void 0 ? void 0 : _d.caption;
    }
    if (message === null || message === void 0 ? void 0 : message.videoMessage) {
        text = (_f = (_e = message === null || message === void 0 ? void 0 : message.videoMessage) === null || _e === void 0 ? void 0 : _e.caption) !== null && _f !== void 0 ? _f : undefined;
    }
    return (_g = text === null || text === void 0 ? void 0 : text.replace("*", "")) !== null && _g !== void 0 ? _g : "";
};
exports.getTextFromMessage = getTextFromMessage;
const findAsyncSequential = (array, predicate) => __awaiter(void 0, void 0, void 0, function* () {
    for (let t of array) {
        const r = yield predicate(t);
        if (typeof r === 'boolean') {
            if (r === true) {
                return t;
            }
        }
        else {
            return r;
        }
    }
    return undefined;
});
exports.findAsyncSequential = findAsyncSequential;
const filterAsync = (array, predicate) => __awaiter(void 0, void 0, void 0, function* () {
    if (!array)
        return [];
    const data = Array.from(array);
    return Promise.all(data.map((element) => predicate(element)))
        .then(result => {
        return data.filter((element, index) => {
            return result[index];
        });
    });
});
exports.filterAsync = filterAsync;
const isTextMatch = (text, comparison) => {
    if (text == undefined || comparison == undefined)
        return false;
    if (comparison === '*')
        return true;
    let regex;
    if (regex = (0, exports.getValidRegex)(comparison)) {
        return regex.test(text);
    }
    const params = (0, StringExtractor_1.default)(comparison, { ignoreCase: true })(text);
    if (Object.keys(params).length) {
        return true;
    }
    if (params === true) {
        return true;
    }
    return comparison.toString().toLowerCase() === text.toString().toLowerCase();
};
exports.isTextMatch = isTextMatch;
const getValidRegex = (text) => {
    try {
        const match = text.match(/^([/~@%#'])(.*?)\1([gimsuy]*)$/);
        return match ? new RegExp(match[2], match[3])
            : undefined;
    }
    catch (e) {
        return;
    }
};
exports.getValidRegex = getValidRegex;
const getObjectType = (obj, deep = 0) => {
    var _a, _b;
    try {
        for (let i = 0; i < deep; i++) {
            obj = Object.getPrototypeOf(obj);
        }
        return (_b = (_a = Object.getPrototypeOf(obj)) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;
    }
    catch (_c) {
        return;
    }
};
exports.getObjectType = getObjectType;
const getAllSubclasses = (baseClass) => {
    const globalObject = Function('return this')();
    const allVars = Object.keys(globalObject);
    const classes = allVars.filter(function (key) {
        try {
            const obj = globalObject[key];
            return obj.prototype instanceof baseClass;
        }
        catch (e) {
            return false;
        }
    });
    return classes;
};
exports.getAllSubclasses = getAllSubclasses;
const getBufferFromUrl = (url) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(url, { responseType: 'arraybuffer' });
    return Buffer.from(response.data);
});
exports.getBufferFromUrl = getBufferFromUrl;
const getBase64FromUrl = (url) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield (0, exports.getBufferFromUrl)(url)).toString('base64');
});
exports.getBase64FromUrl = getBase64FromUrl;
const getParamsName = (fun) => {
    var _a;
    const stripComments = /(\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s*=[^,\)]*(('(?:\\'|[^'\r\n])*')|("(?:\\"|[^"\r\n])*"))|(\s*=[^,\)]*))/mg;
    const argumentNames = /([^\s,]+)/g;
    const fnStr = fun.toString().replace(stripComments, '');
    let result = (_a = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(argumentNames)) !== null && _a !== void 0 ? _a : [];
    return result;
};
exports.getParamsName = getParamsName;
const formatString = (text, params) => {
    return text.replace(/\{([^}]+)\}/g, function (i, match) {
        return params[match];
    });
};
exports.formatString = formatString;
const isValidJid = (jid) => {
    return jid.includes('@s.whatsapp.net');
};
exports.isValidJid = isValidJid;
const getConnectionStatusString = (state) => {
    if (state.connection === 'open') {
        return 'Connected';
    }
    if (state.connection === 'connecting') {
        return 'Connecting';
    }
    if (state.connection === 'close') {
        return 'Disconnected';
    }
    if (state.qr && !state.receivedPendingNotifications) {
        return 'Scanning QR';
    }
    if (!state.qr && state.receivedPendingNotifications) {
        return 'Connected';
    }
    return 'Unknown';
};
exports.getConnectionStatusString = getConnectionStatusString;
const sleep = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
exports.sleep = sleep;
